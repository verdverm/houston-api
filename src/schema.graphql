# import DateTime from "./lib/generated/schema/prisma.graphql"

#
# Directives
#
# Implements authorization rules.
directive @auth(
  permissions: [String]
  op: Operator = AND
) on OBJECT | FIELD_DEFINITION

# Wraps fields to alias a synthetic field to an underlying actual field
directive @alias(
  field: String!
) on FIELD_DEFINITION

#
# Scalars
#
scalar JSON
scalar Uuid

#
# Enums
#
enum EntityType {
  WORKSPACE
  DEPLOYMENT
  SYSTEM
}

enum MetricType {
  DEPLOYMENT_STATUS
  DEPLOYMENT_TASKS
  DEPLOYMENT_DATABASE
  DEPLOYMENT_SCHEDULER
  DEPLOYMENT_QUOTAS
  DEPLOYMENT_USAGE
}


enum Operator {
  AND
  OR
}

#
# Types
#
type AppConfig {
  version: String
  baseDomain: String
}

type AuthUser {
  user: User
  token: Token
  permissions: JSON
  isAdmin: Boolean
  authUserCapabilities: AuthUserCapabilities
}

type AuthUserCapabilities {
  canSysAdmin: Boolean
}

type Token {
  value: String
  payload: TokenPayload
}

type TokenPayload {
  uuid: Uuid
  iat: Int
  exp: Int
}

type AuthProvider {
  name: String!
  displayName: String
  url: String!
}

type AuthConfig {
  publicSignup: Boolean
  initialSignup: Boolean
  localEnabled: Boolean
  providers: [AuthProvider!]
}

type Invite {
  id: ID!
  uuid: Uuid @alias(field: "id")
  assignments: String @deprecated
  role: Role!
  email: String
  token: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

# This only exists to support the legacy API.
type UserProp {
  key: String
  value: String
  category: String
}

type User {
  id: ID!
  uuid: Uuid @alias(field: "id")
  username: String
  emails: [Email!]!
  fullName: String
  status: String
  profile: [UserProp!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  roleBindings: [RoleBinding!]
}

type Workspace {
  id: ID!
  uuid: Uuid @alias(field: "id")
  active: Boolean
  description: String
  invites: [Invite!]!
  properties: JSON
  label: String
  users: [User]
  deploymentCount: Int
  stripeCustomerId: String
  roleBindings: [RoleBinding!]
  workspaceCapabilities: WorkspaceCapabilities
  createdAt: DateTime!
  updatedAt: DateTime!
  trialEndsAt: DateTime
  billingEnabled: Boolean
  paywallEnabled: Boolean
}

type DeploymentConfig {
  defaults: JSON
  limits: JSON
  astroUnit: AstroUnit
  maxExtraAu: Int
  executors: JSON
  singleNamespace: Boolean!
  loggingEnabled: Boolean!
  latestVersion: String @deprecated
  airflowImages: [AirflowImage!]!
  airflowVersions: [String!]!
  defaultAirflowImageTag: String!
  defaultAirflowChartVersion: String!
}

type AirflowImage {
  version: String!
  channel: String!
  tag: String!
}

type WorkspaceCapabilities {
  canUpdateBilling: Boolean
  canUpdateIAM: Boolean
  canUpdateWorkspace: Boolean
  canDeleteWorkspace: Boolean
  canCreateDeployment: Boolean
  canInviteUser: Boolean
  canUpdateUser: Boolean
  canDeleteUser: Boolean
  canCreateServiceAccount: Boolean
  canUpdateServiceAccount: Boolean
  canDeleteServiceAccount: Boolean
}

type AstroUnit {
  cpu: Int
  memory: Int
  pods: Float
  airflowConns: Float
  actualConns: Float
  price: Float
}

type DeploymentUrl {
  type: String
  url: String
}

type DeployInfo {
  current: String
  nextCli: String
  latest: String @deprecated
  next: String @deprecated @alias(field: "nextCli")
}

# Deployment properties are only to support the legacy API.
# Properties have been moved to top-level fields on Deployment internally.
type Deployment {
  id: ID!
  uuid: Uuid @alias(field: "id")
  config: JSON
  env: JSON
  properties: JSON
  urls: [DeploymentUrl]
  description: String
  label: String
  releaseName: String
  status: String
  type: String
  version: String
  airflowVersion: String
  deployInfo: DeployInfo
  workspace: Workspace
  createdAt: DateTime!
  updatedAt: DateTime!
  roleBindings: [RoleBinding!]
  deploymentCapabilities: DeploymentCapabilities
}

type DeploymentCapabilities {
  canDeploy: Boolean
  canUpdateDeployment: Boolean
  canDeleteDeployment: Boolean
  canCreateServiceAccount: Boolean
  canUpdateServiceAccount: Boolean
  canDeleteServiceAccount: Boolean
}

type ServiceAccount {
  id: ID!
  uuid: Uuid @alias(field: "id")
  apiKey: String
  label: String
  category: String
  entityType: String! @deprecated # backwards capability
  entityUuid: Uuid @deprecated # backwards capability
  workspaceUuid: Uuid @alias(field: "entityUuid")
  deploymentUuid: Uuid @alias(field: "entityUuid")
  active: Boolean
  lastUsedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  roleBinding: RoleBinding!
}

type DeploymentLog {
  id: ID!
  uuid: Uuid @alias(field: "id")
  timestamp: String
  release: String
  component: String
  level: String
  message: String
}

type Card {
  name: String
  expMonth: Int!
  expYear: Int!
  last4: String!
  brand: String
  billingEmail: String
  company: String
}

type Metric {
  label: String
  result: JSON
}

type DeploymentStatus {
  result: JSON
}

#
# Queries
#
type Query {
  appConfig: AppConfig @auth

  authConfig(
    redirect: String
    duration: Int
    extras: JSON
    inviteToken: String
  ): AuthConfig

  self: AuthUser @auth

  workspaces: [Workspace] @auth

  deploymentConfig(
    workspaceUuid: Uuid
    deploymentUuid: Uuid
    type: String
    version: String
  ): DeploymentConfig @auth

  deployments: [Deployment] @auth(permissions:["system.deployments.get"])

  # New ServiceAccount (singlton) scoped query
  deploymentServiceAccount(
    serviceAccountUuid: Uuid!
  ): ServiceAccount @auth(permissions: ["deployment.serviceAccounts.get", "system.serviceAccounts.get"], op: OR)

  # New ServiceAccount (list) scoped query
  deploymentServiceAccounts(
    deploymentUuid: Uuid!
  ): [ServiceAccount] @auth(permissions: ["deployment.serviceAccounts.get", "system.serviceAccounts.get"], op: OR)

  workspaceDeployments(
    workspaceUuid: Uuid!
    releaseName: String
  ): [Deployment] @auth(permissions: ["workspace.deployments.get", "system.deployments.get"], op: OR)

  # Legacy - backwards compatibility
  serviceAccounts(
    serviceAccountUuid: Uuid
    entityType: EntityType!
    entityUuid: Uuid
  ): [ServiceAccount] @auth

  # New ServiceAccount (singleton) scoped query
  workspaceServiceAccount(
    serviceAccountUuid: Uuid!
  ): ServiceAccount @auth(permissions: ["workspace.serviceAccounts.get", "system.serviceAccounts.get"], op: OR)

  # New ServiceAccounts (list) scoped query
  workspaceServiceAccounts(
    workspaceUuid: Uuid!
  ): [ServiceAccount] @auth(permissions: ["workspace.serviceAccounts.get", "system.serviceAccounts.get"], op: OR)

  workspaceInvites(
    workspaceUuid: Uuid!
    email: String
  ): [Invite] @auth(permissions:["workspace.invites.get"])

  workspaceUsers(
    workspaceUuid: Uuid!
    email: String
    fullName: String
  ): [User] @auth(permissions: ["workspace.users.get"])

  workspaceUser(
    workspaceUuid: Uuid!
    username: String!
  ): User @auth(permissions: ["workspace.users.get"])

  users(
    userUuid: Uuid
    username: String
    email: String
  ): [User] @auth(permissions: ["system.users.get"])

  invites(
    email: String
  ): [Invite] @auth(permissions:["system.users.get"])

  logs(
    deploymentUuid: Uuid!
    component: String
    timestamp: DateTime
    search: String
  ): [DeploymentLog] @auth(permissions: ["deployment.logs.get", "system.deployments.logs"], op: OR)

  card(
    workspaceUuid: Uuid!
    stripeCustomerId: String!
  ): Card @auth(permissions: ["workspace.billing.update"])
}

#
# Mutations
#
type Mutation {
  createUser(
    email: String!
    password: String!
    username: String
    profile: JSON
    inviteToken: String
    duration: Int
  ): AuthUser

  confirmEmail(
    token: String!
    duration: Int
  ): AuthUser

  createToken(
    password: String!
    identity: String
    duration: Int
  ): AuthUser

  forgotPassword(
    email: String!
  ): Boolean!

  resendConfirmation(
    email: String!
  ): Boolean!

  resetPassword(
    token: String!
    password: String!
    duration: Int
  ): AuthUser

  createDeployment(
    workspaceUuid: Uuid!
    type: String!
    label: String!
    description: String
    version: String
    airflowVersion: String
    config: JSON
    env: JSON
    properties: JSON
  ): Deployment @auth(permissions:["workspace.deployments.create"])

  updateDeployment(
    deploymentUuid: Uuid!
    payload: JSON
    config: JSON
    env: JSON
    sync: Boolean
  ): Deployment @auth(permissions: ["deployment.config.update", "system.deployments.update"], op: OR)

  deploymentAlertsUpdate(
    deploymentUuid: Uuid!
    alertEmails: [String!]
  ): Deployment @auth(permissions: ["deployment.config.update", "system.deployments.update"], op: OR)

  deleteDeployment(
    deploymentUuid: Uuid!
  ): Deployment @auth(permissions: ["deployment.config.delete", "system.deployments.delete"], op: OR)

  deleteWorkspace(
    workspaceUuid: Uuid
  ): Workspace @auth(permissions: ["workspace.config.delete"])

  updateUser(
    userId: Uuid,
    payload: JSON!
  ): User @auth

  removeUser(
    userUuid: Uuid!
  ): User @auth(permissions: ["system.user.delete"])

  createWorkspace(
    label: String!
    description: String
  ): Workspace @auth(permissions: ["system.workspace.create"])

  workspaceAddUser(
    workspaceUuid: Uuid
    email: String!
    # For backwards compatibility specify the previous behaviour as default value
    role: Role! = WORKSPACE_VIEWER
  ): Workspace @auth(permissions: ["workspace.iam.update"])

  workspaceUpdateUserRole(
    workspaceUuid: Uuid!
    email: String!
    role: Role!
  ): Role @auth(permissions: ["workspace.iam.update"])

  workspaceRemoveUser(
    workspaceUuid: Uuid!
    userUuid: Uuid!
  ): Workspace @auth(permissions: ["workspace.iam.update"])

  deleteInviteToken(
    inviteUuid: Uuid
  ): Invite @auth

  updateWorkspace(
    workspaceUuid: Uuid!
    payload: JSON!
  ): Workspace @auth(permissions: ["workspace.config.update"])

  upgradeDeployment(
    deploymentUuid: Uuid!
    version: String!
  ): Deployment @auth(permissions: ["deployment.config.update", "system.deployments.update"] op: OR)

  # ServiceAccount mutations are handled differently at the moment to maintain
  # backward compatibility with CLI / UI. We should refactor to
  # more explicit, scoped mutations.
  # Legacy - backwards compatibility
  createServiceAccount(
    label: String!
    category: String
    entityType: EntityType!
    entityUuid: Uuid
    role: Role!
  ): ServiceAccount @auth

  # New ServiceAccount scoped mutation
  createDeploymentServiceAccount(
    label: String!
    category: String
    deploymentUuid: Uuid!
    role: Role!
  ): ServiceAccount @auth(permissions: ["deployment.serviceAccounts.create", "system.serviceAccounts.create"], op: OR)

  # New ServiceAccount scoped mutation
  createWorkspaceServiceAccount(
    label: String!
    category: String
    workspaceUuid: Uuid!
    role: Role!
  ): ServiceAccount @auth(permissions: ["workspace.serviceAccounts.create", "system.serviceAccounts.create"], op: OR)

  # New ServiceAccount scoped mutation
  createSystemServiceAccount(
    label: String!
    category: String
    role: Role!
  ): ServiceAccount @auth(permissions: ["system.serviceAccounts.create"], op: OR)

  # Legacy - backwards compatibility
  updateServiceAccount(
    serviceAccountUuid: Uuid!
    payload: JSON!
  ): ServiceAccount @auth

  updateWorkspaceServiceAccount(
    serviceAccountUuid: Uuid!
    workspaceUuid: Uuid!
    payload: JSON!
  ): ServiceAccount @auth(permissions: ["workspace.serviceAccounts.update", "system.serviceAccounts.update"], op: OR)

  updateDeploymentServiceAccount(
    serviceAccountUuid: Uuid!
    deploymentUuid: Uuid!
    payload: JSON!
  ): ServiceAccount @auth(permissions: ["deployment.serviceAccounts.update", "system.serviceAccounts.update"], op: OR)

  # Legacy - backwards compatibility
  deleteServiceAccount(
    serviceAccountUuid: Uuid!
  ): ServiceAccount @auth

  deleteWorkspaceServiceAccount(
    serviceAccountUuid: Uuid!
    workspaceUuid: Uuid!
  ): ServiceAccount @auth(permissions: ["workspace.serviceAccounts.delete", "system.serviceAccounts.delete"], op: OR)

  deleteDeploymentServiceAccount(
    serviceAccountUuid: Uuid!
    deploymentUuid: Uuid!
  ): ServiceAccount @auth(permissions: ["deployment.serviceAccounts.delete", "system.serviceAccounts.delete"], op: OR)

  deleteSystemServiceAccount(
    serviceAccountUuid: Uuid!
  ): ServiceAccount @auth(permissions: ["system.serviceAccounts.delete"], op: OR)

  createSystemRoleBinding(
    userId: ID!
    role: Role!
  ): RoleBinding @auth(permissions: ["system.iam.update"])

  # Invite a user to create an account in this system. Useful when signups are
  # disabled on the platform. To invite a user (new or existing) to a workspace
  # use the workspaceAddUser mutation.
  inviteUser(
    email: String!
  ): Boolean @auth(permissions: ["system.user.invite"])

  addCard(
    workspaceUuid: Uuid!
    billingEmail: String!
    company: String
    token: String!
  ): Card @auth(permissions: ["workspace.billing.update"])

  addCustomerId(
    workspaceUuid: Uuid!
    stripeCustomerId: String!
  ): Workspace @auth(permissions: ["system.workspace.addCustomerId"])

  updateCard(
    workspaceUuid: Uuid!
    billingEmail: String!
    company: String
    token: String!
  ): Card @auth(permissions: ["workspace.billing.update"])

  suspendWorkspace(
    workspaceUuid: Uuid!
    isSuspended: Boolean!
  ): Workspace @auth(permissions: ["system.workspace.suspend"])

  extendWorkspaceTrial(
    workspaceUuid: Uuid!
    extraDays: Int!
  ): Workspace @auth(permissions: ["system.workspace.extendTrial"])

  verifyEmail(
    email: String!
  ): Boolean @auth(permissions: ["system.user.verifyEmail"])
}

#
# Subscriptions
#
type Subscription {
  log(
    deploymentUuid: Uuid!
    component: String
    timestamp: DateTime
    search: String
  ): DeploymentLog @auth(permissions: ["deployment.logs.get", "system.deployments.logs"], op: OR)

  metrics(
    deploymentUuid: Uuid!
    metricType: [MetricType]
    since: Int
    step: Int
  ): [Metric] @auth(permissions: ["deployment.metrics.get", "system.deployments.metrics"], op: OR)

  deploymentStatus(
    releaseName: String!
  ): DeploymentStatus @auth
}
